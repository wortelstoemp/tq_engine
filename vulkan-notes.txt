Test:

VkResult vkEnumerateInstanceExtensionProperties(const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties);
_______________________________________________________________________________

Setup:

* Create instance:

	VkInstance instance;
	
	VkApplicationInfo appInfo;
	appInfo.sType = VK_STRUCTURE_TYPE_APPLICATION_INFO;
	appInfo.pNext = NULL;
	appInfo.pApplicationName = "TQ Engine";
	appInfo.applicationVersion = VK_MAKE_VERSION(1, 0, 0);
	appInfo.pEngineName = "TQ Engine";
	appInfo.engineVersion = VK_MAKE_VERSION(1, 0, 0);
	appInfo.apiVersion = VK_API_VERSION_1_0;

	VkInstanceCreateInfo instanceCreateInfo;
	instanceCreateInfo.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
	instanceCreateInfo.pNext = NULL;
	instanceCreateInfo.flags = 0;
	instanceCreateInfo.pApplicationInfo = &appInfo;
	instanceCreateInfo.ppEnabledLayerNames = NULL;
	
	unsigned int extensionCount = 0;
	const char** extensionNames = NULL;
    extensionNames = glfwGetRequiredInstanceExtensions(&extensionCount);
	printf("count: %u\n", extensionCount);
    
	instanceCreateInfo.enabledExtensionCount = extensionCount;
	instanceCreateInfo.ppEnabledExtensionNames = extensionNames;
	instanceCreateInfo.enabledLayerCount = 0;
	
	if (vkCreateInstance(&instanceCreateInfo, NULL, &instance) != VK_SUCCESS) {
		printf("Couldn't create VkInstance.\n");
	}
	
* Destroy instance:
	vkDestroy(instance, NULL);	
_______________________________________________________________________________	

TODO - Validation layers:

Optional components that hook into Vulkan function calls for extra operations:
	- Compare parameters against the spec to detect misuse
	- Tracking creation and destruction of objects to find resource leaks
	- Checking thread safety by tracking the threads that calls originate from
	- Logging every call and its parameters to the standard output
	- Tracing Vulkan calls for profiling and replaying

--> For debugging and ensuring that code works on multiple drivers

_______________________________________________________________________________

Physical Devices & Queue Families

* Create:
	VkPhysicalDevice physicalDevice = VK_NULL_HANDLE;
	uint32_t physicalDeviceCount = 0;
	vkEnumeratePhysicalDevices(instance, &physicalDeviceCount, NULL);
	VkPhysicalDevice* physicalDevices = (VkPhysicalDevice*) malloc(sizeof(VkPhysicalDevice) * physicalDeviceCount);	
	if (physicalDeviceCount == 0) {
    	printf("No devices with Vulkan support.\n");
		exit(EXIT_FAILURE);
	}
	
	/* Check if device is suitable */
	
	for (int i = 0; i < physicalDeviceCount; i++) {
    	if (IsDeviceSuitable(physicalDevices[i])) {
        	physicalDevice = physicalDevices[i];
        	break;
    	}
	}

	if (physicalDevice == VK_NULL_HANDLE) {
    	printf("Failed to find a suitable physical device.\n");
	}
	
	bool IsDeviceSuitable(VkPhysicalDevice device)
	{
		VkPhysicalDeviceProperties deviceProperties;
    	VkPhysicalDeviceFeatures deviceFeatures;
    	vkGetPhysicalDeviceProperties(device, &deviceProperties);
    	vkGetPhysicalDeviceFeatures(device, &deviceFeatures);
		
		return deviceProperties.deviceType == VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU && deviceFeatures.geometryShader;
	}
	

* Destroy:
	free(physicalDevices);
_______________________________________________________________________________

Logical Devices & Queues